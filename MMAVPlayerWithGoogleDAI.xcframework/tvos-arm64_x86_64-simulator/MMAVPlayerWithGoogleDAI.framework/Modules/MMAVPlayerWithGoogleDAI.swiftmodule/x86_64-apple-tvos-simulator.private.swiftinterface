// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.9 (swiftlang-5.9.0.128.108 clang-1500.0.40.1)
// swift-module-flags: -target x86_64-apple-tvos14.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name MMAVPlayerWithGoogleDAI
// swift-module-flags-ignorable: -enable-bare-slash-regex
import AVFoundation
import Foundation
import GoogleInteractiveMediaAds
@_exported import MMAVPlayerWithGoogleDAI
import Swift
import SystemConfiguration
import UIKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
import os
@_inheritsConvenienceInitializers @objc public class AVPlayerIntegrationWrapper : ObjectiveC.NSObject, MMAVPlayerWithGoogleDAI.MMSmartStreamingObserver {
  public static let shared: MMAVPlayerWithGoogleDAI.AVPlayerIntegrationWrapper
  @objc public static func getVersion() -> Swift.String!
  @objc public static func disableManifestsFetch(disable: Swift.Bool)
  public static func setPlayerRegistrationInformation(registrationInformation pInfo: MMAVPlayerWithGoogleDAI.MMRegistrationInformation?, player aPlayer: AVFoundation.AVPlayer?)
  @objc public static func initializeAssetForPlayer(assetInfo aInfo: MMAVPlayerWithGoogleDAI.MMAssetInformation, registrationInformation pInfo: MMAVPlayerWithGoogleDAI.MMRegistrationInformation?, player aPlayer: AVFoundation.AVPlayer?, isLive: Swift.Bool)
  @objc public static func initializeAssetForPlayer(assetInfo aInfo: MMAVPlayerWithGoogleDAI.MMAssetInformation, registrationInformation pInfo: MMAVPlayerWithGoogleDAI.MMRegistrationInformation?, player aPlayer: AVFoundation.AVPlayer?)
  public static func changeAssetForPlayer(assetInfo aInfo: MMAVPlayerWithGoogleDAI.MMAssetInformation, player aPlayer: AVFoundation.AVPlayer?)
  @objc public static func cleanUp()
  public static func updateSubscriber(subscriberId: Swift.String!, subscriberType: Swift.String!, subscriberMetadata: Swift.String!)
  public func reportCustomMetadata(key: Swift.String!, value: Swift.String!)
  public func reportVideoQuality(videoQuality: Swift.String)
  public func reportDeviceMarketingName(deviceMarketingName: Swift.String)
  public func reportDeviceID()
  public func reportAppData(appName: Swift.String, appVersion: Swift.String)
  public func enableLogTrace(logStTrace: Swift.Bool)
  public func reportError(error: Swift.String, playbackPosMilliSec: Swift.Int)
  public static func reportMetricValue(metricToOverride: MMAVPlayerWithGoogleDAI.MMOverridableMetrics, value: Swift.String!)
  @objc public func sessionInitializationCompleted(with status: MMAVPlayerWithGoogleDAI.MMSmartStreamingInitializationStatus, andDescription description: Swift.String?, forCmdWithId cmdId: Swift.Int, nowtilusPermission enableNowtilus: Swift.Bool)
  @objc override dynamic public func observeValue(forKeyPath keyPath: Swift.String?, of object: Any?, change: [Foundation.NSKeyValueChangeKey : Any]?, context: Swift.UnsafeMutableRawPointer?)
  @objc public func setMMIMAContext(adLoadingContext: GoogleInteractiveMediaAds.IMAAdsLoader, adDisplay: GoogleInteractiveMediaAds.IMAAVPlayerVideoDisplay?, hasAdTag: Swift.Bool)
  @objc override dynamic public init()
  @objc deinit
}
@objc public class MMRegistrationInformation : ObjectiveC.NSObject {
  public var customerID: Swift.String!
  public var component: Swift.String!
  public var playerName: Swift.String!
  public var domainName: Swift.String?
  public var subscriberID: Swift.String?
  public var hashSubscriberID: Swift.Bool!
  public var subscriberType: Swift.String?
  public var subscriberTag: Swift.String?
  public var playerBrand: Swift.String?
  public var playerModel: Swift.String?
  public var playerVersion: Swift.String?
  @objc public init(customerID cID: Swift.String, playerName pName: Swift.String)
  @objc public func setDomain(_ dName: Swift.String?)
  @objc public func setSubscriberInformation(subscriberID subsID: Swift.String?, subscriberType subsType: Swift.String?, subscriberTag subsTag: Swift.String?, hashSubscriberID hashSubID: Swift.Bool)
  @objc public func setSubscriberInformation(subscriberID subsID: Swift.String?, subscriberType subsType: Swift.String?, subscriberTag subsTag: Swift.String?)
  @objc public func setPlayerInformation(brand: Swift.String?, model: Swift.String?, version: Swift.String?)
  @objc public func setComponentName(_ cName: Swift.String?)
  @objc deinit
}
public enum MMOverridableMetrics {
  case Latency, CDN, DurationWatched
  public static func == (a: MMAVPlayerWithGoogleDAI.MMOverridableMetrics, b: MMAVPlayerWithGoogleDAI.MMOverridableMetrics) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum ReachabilityErrorMM : Swift.Error {
  case FailedToCreateWithAddress(Darwin.sockaddr_in)
  case FailedToCreateWithHostname(Swift.String)
  case UnableToSetCallback
  case UnableToSetDispatchQueue
}
public let ReachabilityChangedNotificationMM: Foundation.NSNotification.Name
public class ReachabilityMM {
  public typealias NetworkReachable = (MMAVPlayerWithGoogleDAI.ReachabilityMM) -> ()
  public typealias NetworkUnreachable = (MMAVPlayerWithGoogleDAI.ReachabilityMM) -> ()
  public enum NetworkStatus : Swift.CustomStringConvertible {
    case notReachable, reachableViaWiFi, reachableViaWWAN
    public var description: Swift.String {
      get
    }
    public static func == (a: MMAVPlayerWithGoogleDAI.ReachabilityMM.NetworkStatus, b: MMAVPlayerWithGoogleDAI.ReachabilityMM.NetworkStatus) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public var whenReachable: MMAVPlayerWithGoogleDAI.ReachabilityMM.NetworkReachable?
  public var whenUnreachable: MMAVPlayerWithGoogleDAI.ReachabilityMM.NetworkUnreachable?
  public var reachableOnWWAN: Swift.Bool
  public var currentReachabilityString: Swift.String {
    get
  }
  public var currentReachabilityStatus: MMAVPlayerWithGoogleDAI.ReachabilityMM.NetworkStatus {
    get
  }
  required public init(reachabilityRef: SystemConfiguration.SCNetworkReachability)
  convenience public init?(hostname: Swift.String)
  convenience public init?()
  @objc deinit
}
extension MMAVPlayerWithGoogleDAI.ReachabilityMM {
  public func startNotifier() throws
  public func stopNotifier()
  public var isReachable: Swift.Bool {
    get
  }
  public var isReachableViaWWAN: Swift.Bool {
    get
  }
  public var isReachableViaWiFi: Swift.Bool {
    get
  }
  public var description: Swift.String {
    get
  }
}
@_inheritsConvenienceInitializers @objc public class ReachabilityManager : ObjectiveC.NSObject {
  public static let shared: MMAVPlayerWithGoogleDAI.ReachabilityManager
  @objc override dynamic public init()
  @objc deinit
}
public enum AdType : Swift.Int {
  case linear
  case unknown
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers public class MMAdInfoObject {
  @objc deinit
}
@objc public protocol MMAdManagerDelegate {
  @objc optional func adsLoader(_ loader: GoogleInteractiveMediaAds.IMAAdsLoader!, adsLoadedWith adsLoadedData: GoogleInteractiveMediaAds.IMAAdsLoadedData!)
  @objc optional func adsManagerDidRequestContentPause(_ adsManager: GoogleInteractiveMediaAds.IMAAdsManager!)
  @objc optional func adsManagerDidRequestContentResume(_ adsManager: GoogleInteractiveMediaAds.IMAAdsManager!)
  @objc optional func adsLoader(_ loader: GoogleInteractiveMediaAds.IMAAdsLoader!, failedWith adErrorData: GoogleInteractiveMediaAds.IMAAdLoadingErrorData!)
  @objc optional func adsManager(adsManager: GoogleInteractiveMediaAds.IMAAdsManager!, didReceive event: GoogleInteractiveMediaAds.IMAAdEvent!)
  @objc optional func adsManager(_ adsManager: GoogleInteractiveMediaAds.IMAAdsManager!, didReceive error: GoogleInteractiveMediaAds.IMAAdError!)
  @objc optional func adsManagerAdPlaybackReady(_ adsManager: GoogleInteractiveMediaAds.IMAAdsManager!)
  @objc optional func adsManagerAdDidStartBuffering(_ adsManager: GoogleInteractiveMediaAds.IMAAdsManager!)
  @objc optional func adsManager(_ adsManager: GoogleInteractiveMediaAds.IMAAdsManager!, adDidBufferToMediaTime mediaTime: Foundation.TimeInterval)
  @objc optional func adsManager(_ adsManager: GoogleInteractiveMediaAds.IMAAdsManager!, adDidProgressToTime mediaTime: Foundation.TimeInterval, totalTime: Foundation.TimeInterval)
  @objc optional func adManagerFinishedPlayingAllAds()
  @objc optional func streamManager(streamManager: GoogleInteractiveMediaAds.IMAStreamManager!, didReceive event: GoogleInteractiveMediaAds.IMAAdEvent!)
  @objc optional func streamManager(_ streamManager: GoogleInteractiveMediaAds.IMAStreamManager!, didReceive error: GoogleInteractiveMediaAds.IMAAdError!)
  @objc optional func streamManager(streamManager: GoogleInteractiveMediaAds.IMAStreamManager!, adDidProgressToTime time: Foundation.TimeInterval, adDuration: Foundation.TimeInterval, adPosition: Swift.Int, totalAds: Swift.Int, adBreakDuration: Foundation.TimeInterval, adPeriodDuration: Foundation.TimeInterval)
}
@objc public class MMAssetInformation : ObjectiveC.NSObject {
  public var assetURL: Swift.String!
  public var assetID: Swift.String?
  public var assetName: Swift.String?
  public var videoId: Swift.String?
  public var qbrMode: MMAVPlayerWithGoogleDAI.MMQBRMode
  public var metafileURL: Foundation.URL?
  public var customKVPs: [Swift.String : Swift.String]!
  public var contentType: Swift.String?
  public var drmProtection: Swift.String?
  public var episodeNumber: Swift.String?
  public var genre: Swift.String?
  public var season: Swift.String?
  public var seriesTitle: Swift.String?
  @objc public init(assetURL aURL: Swift.String, assetID aId: Swift.String?, assetName aName: Swift.String?, videoId vId: Swift.String?)
  @objc public init(assetURL aURL: Swift.String, assetID aId: Swift.String?, assetName aName: Swift.String?, videoId vId: Swift.String?, contyentType cType: Swift.String? = nil, drmProtection: Swift.String? = nil, episodeNumber eNumber: Swift.String? = nil, genre: Swift.String? = nil, season: Swift.String? = nil, seriesTitle: Swift.String? = nil)
  @objc public func addCustomKVP(_ key: Swift.String, _ value: Swift.String)
  @objc public func setQBRMode(_ mode: MMAVPlayerWithGoogleDAI.MMQBRMode, withMetaURL metaURL: Foundation.URL?)
  @objc public func setContentType(_ cType: Swift.String?)
  @objc public func setDrmProtection(_ drmP: Swift.String?)
  @objc public func setEpisodeNumber(_ eNumber: Swift.String?)
  @objc public func setGenre(_ genre: Swift.String?)
  @objc public func setSeason(_ season: Swift.String?)
  @objc public func setSeriesTitle(_ sTitle: Swift.String?)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class MMIMAAdManager : ObjectiveC.NSObject, MMAVPlayerWithGoogleDAI.MMAdManagerDelegate {
  public var delegate: (any MMAVPlayerWithGoogleDAI.MMAdManagerDelegate)?
  public static let sharedManager: MMAVPlayerWithGoogleDAI.MMIMAAdManager
  public var isAdPlaying_: Swift.Bool
  @objc public func setIMAAdsContext(context: GoogleInteractiveMediaAds.IMAAdsLoader, adsDisplay: GoogleInteractiveMediaAds.IMAAVPlayerVideoDisplay?, hasAdTag: Swift.Bool)
  @objc public func adsLoader(_ loader: GoogleInteractiveMediaAds.IMAAdsLoader!, adsLoadedWith adsLoadedData: GoogleInteractiveMediaAds.IMAAdsLoadedData!)
  @objc public func adsManagerAdPlaybackReady(_ adsManager: GoogleInteractiveMediaAds.IMAAdsManager!)
  @objc public func adsManagerAdDidStartBuffering(_ adsManager: GoogleInteractiveMediaAds.IMAAdsManager!)
  @objc public func adsManager(_ adsManager: GoogleInteractiveMediaAds.IMAAdsManager!, adDidBufferToMediaTime mediaTime: Foundation.TimeInterval)
  @objc public func adsManager(_ adsManager: GoogleInteractiveMediaAds.IMAAdsManager!, adDidProgressToTime mediaTime: Foundation.TimeInterval, totalTime: Foundation.TimeInterval)
  @objc public func adsLoader(_ loader: GoogleInteractiveMediaAds.IMAAdsLoader!, failedWith adErrorData: GoogleInteractiveMediaAds.IMAAdLoadingErrorData!)
  @objc public func adsManager(adsManager: GoogleInteractiveMediaAds.IMAAdsManager!, didReceive event: GoogleInteractiveMediaAds.IMAAdEvent!)
  @objc public func adsManager(_ adsManager: GoogleInteractiveMediaAds.IMAAdsManager!, didReceive error: GoogleInteractiveMediaAds.IMAAdError!)
  @objc public func adsManagerDidRequestContentPause(_ adsManager: GoogleInteractiveMediaAds.IMAAdsManager!)
  @objc public func adsManagerDidRequestContentResume(_ adsManager: GoogleInteractiveMediaAds.IMAAdsManager!)
  @objc public func streamManager(streamManager: GoogleInteractiveMediaAds.IMAStreamManager!, didReceive event: GoogleInteractiveMediaAds.IMAAdEvent!)
  @objc public func streamManager(_ streamManager: GoogleInteractiveMediaAds.IMAStreamManager!, didReceive error: GoogleInteractiveMediaAds.IMAAdError!)
  @objc public func streamManager(streamManager: GoogleInteractiveMediaAds.IMAStreamManager!, adDidProgressToTime time: Foundation.TimeInterval, adDuration: Foundation.TimeInterval, adPosition: Swift.Int, totalAds: Swift.Int, adBreakDuration: Foundation.TimeInterval, adPeriodDuration: Foundation.TimeInterval)
  @objc override dynamic public init()
  @objc deinit
}
extension MMAVPlayerWithGoogleDAI.MMOverridableMetrics : Swift.Equatable {}
extension MMAVPlayerWithGoogleDAI.MMOverridableMetrics : Swift.Hashable {}
extension MMAVPlayerWithGoogleDAI.ReachabilityMM.NetworkStatus : Swift.Equatable {}
extension MMAVPlayerWithGoogleDAI.ReachabilityMM.NetworkStatus : Swift.Hashable {}
extension MMAVPlayerWithGoogleDAI.AdType : Swift.Equatable {}
extension MMAVPlayerWithGoogleDAI.AdType : Swift.Hashable {}
extension MMAVPlayerWithGoogleDAI.AdType : Swift.RawRepresentable {}
